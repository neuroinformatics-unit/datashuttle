from __future__ import annotations

import json
from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from datashuttle.configs.config_class import Configs

from datashuttle.utils import rclone, utils

# -----------------------------------------------------------------------------
# Helper Functions
# -----------------------------------------------------------------------------

# These functions are used by both API and TUI for setting up connections to google drive.


def preliminary_for_setup_without_browser(
    cfg: Configs,
    gdrive_client_secret: str | None,
    rclone_config_name: str,
    log: bool = True,
) -> str:
    """Prepare rclone configuration for Google Drive without using a browser.

    This function prepares the rclone configuration for Google Drive without using a browser.

    The `config_is_local=false` flag tells rclone that the configuration process is being run
    on a headless machine which does not have access to a browser.

    The `--non-interactive` flag is used to control rclone's behaviour while running it through
    external applications. An `rclone config create` command would assume default values for config
    variables in an interactive mode. If the `--non-interactive` flag is provided and rclone needs
    the user to input some detail, a JSON blob will be returned with the question in it. For this
    particular setup, rclone outputs a command for user to run on a machine with a browser.

    This function runs `rclone config create` with the user credentials and returns the rclone's output info.
    This output info is presented to the user while asking for a `config_token`.

    Next, the user will run rclone's given command, authenticate with google drive and input the
    config token given by rclone for datashuttle to proceed with the setup.
    """
    client_id_key_value = (
        f"client_id {cfg['gdrive_client_id']} "
        if cfg["gdrive_client_id"]
        else " "
    )
    client_secret_key_value = (
        f"client_secret {gdrive_client_secret} "
        if gdrive_client_secret
        else ""
    )
    output = rclone.call_rclone(
        f"config create "
        f"{rclone_config_name} "
        f"drive "
        f"{client_id_key_value}"
        f"{client_secret_key_value}"
        f"scope drive "
        f"root_folder_id {cfg['gdrive_root_folder_id']} "
        f"config_is_local=false "
        f"--non-interactive",
        pipe_std=True,
    )

    # Extracting rclone's message from the json
    output_json = json.loads(output.stdout)
    message = output_json["Option"]["Help"]

    if log:
        utils.log(message)

    return message


# -----------------------------------------------------------------------------
# Python API
# -----------------------------------------------------------------------------


def ask_user_for_browser(log: bool = True) -> bool:
    """Ask the user if they have access to an internet browser, for Google Drive set up."""
    message = "Are you running Datashuttle on a machine with access to a web browser? (y/n): "
    input_ = utils.get_user_input(message).lower()

    while input_ not in ["y", "n"]:
        utils.print_message_to_user("Invalid input. Press either 'y' or 'n'.")
        input_ = utils.get_user_input(message).lower()

    answer = input_ == "y"

    if log:
        utils.log(message)
        utils.log(f"User answer: {answer}")

    return answer


def prompt_and_get_config_token(
    cfg: Configs,
    gdrive_client_secret: str | None,
    rclone_config_name: str,
    log: bool = True,
) -> str:
    """Prompt the user for rclone config token.

    This function presents the rclone's output/message to ask the user to run a command, authenticate
    with google drive and input the `config_token` generated by rclone. The `config_token` is
    then used to complete rclone's config setup for google drive.
    """
    message = preliminary_for_setup_without_browser(
        cfg, gdrive_client_secret, rclone_config_name, log=log
    )
    input_ = utils.get_user_input(
        message + "\nEnter the output here: "
    ).strip()

    return input_


def get_client_secret(log: bool = True) -> str:
    """Prompt the user for their Google Drive client secret key."""
    gdrive_client_secret = utils.get_connection_secret_from_user(
        connection_method_name="Google Drive",
        key_name_full="Google Drive client secret",
        key_name_short="secret key",
        log_status=log,
    )

    return gdrive_client_secret.strip()
