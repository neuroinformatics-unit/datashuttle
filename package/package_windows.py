import shutil
import subprocess
from pathlib import Path

import packaging_utils

# ----------------------------------------------------------------------------------------------------------------------
# Windows - Inno Setup
# ----------------------------------------------------------------------------------------------------------------------


def make_inno_setup_script(version, base_path):
    """{} are required in text so easier to use this method"""
    file_body = (
        r"""
        ; Script generated by the Inno Setup Script Wizard.
    ; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

    #define MyAppName "Datashuttle"
    #define MyAppVersion """
        + '"'
        + version
        + """"
    #define MyAppPublisher "Neuroinformatics Unit, Sainsbury Wellcome Centre, London, UK."
    #define MyAppURL "www.datashuttle.neuroinformatics.dev"
    #define MyAppExeName "terminal_launcher.exe"

    [Setup]
    ; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
    ; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
    AppId={{D063D197-9D21-426B-BF8C-D5612C74DF15}
    AppName={#MyAppName}
    AppVersion={#MyAppVersion}
    ;AppVerName={#MyAppName} {#MyAppVersion}
    AppPublisher={#MyAppPublisher}
    AppPublisherURL={#MyAppURL}
    AppSupportURL={#MyAppURL}
    AppUpdatesURL={#MyAppURL}
    DefaultDirName={autopf}\DataShuttle
    DisableProgramGroupPage=yes
    LicenseFile="""
        + base_path
        + """\dist\license.txt
    ; Uncomment the following line to run in non administrative install mode (install for current user only.)
    ;PrivilegesRequired=lowest
    PrivilegesRequiredOverridesAllowed=dialog
    OutputBaseFilename=datashuttle_"""
        + version
        + """
    SetupIconFile="""
        + base_path
        + r"""\dist\NeuroBlueprint_icon.ico
    UninstallDisplayIcon={app}\NeuroBlueprint_icon.ico
    Compression=lzma
    SolidCompression=yes
    WizardStyle=modern

    [Languages]
    Name: "english"; MessagesFile: "compiler:Default.isl"

    [Tasks]
    Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

    [Files]
    Source: """
        + '"'
        + base_path
        + r"""\dist\terminal_launcher.exe"; DestDir: "{app}"; Flags: ignoreversion
    Source: """
        + '"'
        + base_path
        + """\dist\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
    ; NOTE: Don't use "Flags: ignoreversion" on any shared system files

    [Icons]
    Name: "{autoprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
    Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

    [Run]
    Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent
    """
    )

    return file_body


# Constants
WEZTERM_VERSION = packaging_utils.get_wezterm_version()
WEZTERM_FOLDERNAME = f"WezTerm-windows-{WEZTERM_VERSION}"
WEZTERM_URL = f"https://github.com/wezterm/wezterm/releases/download/{WEZTERM_VERSION}/{WEZTERM_FOLDERNAME}.zip"

# Paths
project_root = Path(__file__).parent
vendored_dir = project_root / "_vendored"

if not (vendored_dir / WEZTERM_FOLDERNAME).exists():
    packaging_utils.download_wezterm(vendored_dir, WEZTERM_FOLDERNAME)

if (build_path := project_root / "build").exists():
    shutil.rmtree(build_path)

if (dist_path := project_root / "dist").exists():
    shutil.rmtree(dist_path)

# Step 2: Run PyInstaller builds
subprocess.run(f"pyinstaller {project_root / 'datashuttle.spec'}", shell=True)
subprocess.run(
    f"pyinstaller {project_root / 'terminal_launcher_windows.spec'}",
    shell=True,
)


# Paths
dist_dir = project_root / "dist"
launcher_subdir = dist_dir / "terminal_launcher"

# Copy contents of dist/terminal_launcher/ into dist/
for item in launcher_subdir.iterdir():
    dest = dist_dir / item.name
    if item.is_dir():
        if dest.exists():
            shutil.rmtree(dest)
        shutil.copytree(item, dest)
    else:
        shutil.copy2(item, dest)

# Optional: Remove the now-empty terminal_launcher folder
shutil.rmtree(launcher_subdir)


# Step 3: Copy WezTerm into dist/_vendored
terminal_launcher_dist_dir = dist_dir / "terminal_launcher"
vendored_output_path = dist_dir / "_vendored" / WEZTERM_FOLDERNAME

shutil.copytree(
    vendored_dir / WEZTERM_FOLDERNAME, vendored_output_path, dirs_exist_ok=True
)

shutil.copy(
    project_root / "license.txt", dist_dir
)  # TODO: NEED TO DO THIS FOR ALL
shutil.copy(project_root / "NeuroBlueprint_icon.ico", dist_dir)

shutil.copy(
    project_root / "wezterm_config.lua",
    project_root / "dist" / "_vendored" / WEZTERM_FOLDERNAME,
)

import os

inno_path = project_root / "inno_complie_script.iss"

if os.path.isfile(inno_path):
    os.remove(inno_path)
f = open(inno_path, "a")

text = make_inno_setup_script("0.0.0", str(project_root))  # TODO: version

f.write(text.strip())
f.close()

# TODO: set up downloader

subprocess.call(rf"C:\Program Files (x86)\Inno Setup 6\iscc {inno_path}")
